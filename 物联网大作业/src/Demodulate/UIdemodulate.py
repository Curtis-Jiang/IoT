# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UIdemodulate.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from recorder import save_record
from reader import PATH, read_wave


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(640, 480)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(100, 340, 121, 51))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 40, 451, 211))
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(380, 340, 121, 51))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.label.setWordWrap(True)
        self.label.setText("Waiting")
        self.label.adjustSize()
        self.pushButton.clicked.connect(self.start_record)
        self.pushButton_2.clicked.connect(self.reset)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "start"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton_2.setText(_translate("MainWindow", "reset"))

    def start_record(self):
        start_time = time.time()
        showing_string = ""
        self.label.setText("recording")
        self.label.adjustSize()
        self.label.repaint()
        save_record()
        self.label.setText("recording finished, decoding")
        self.label.adjustSize()
        self.label.repaint()
        ans = read_wave(PATH)
        # ans = "hghfu1d1qbi9oy3guq3wghjfk567zgfgj4e56uyt78irrtdfgfcgrtw456745478yughghfu1d1qbi9oy3guq3wghjfk567zgfgj4e56uyt78irrtdfgfcgrtw456745478yug"
        if len(ans) > 50:
            for i in range(0, len(ans), 50):
                if i + 50 < len(ans):
                    showing_string += ans[i:i+50] + "\n"
                else:
                    showing_string += ans[i:]
        else:
            showing_string = ans
        with open("string.txt", "a") as f:
            f.write(ans)
        end_time = time.time()
        print("time cost: ", end_time - start_time)
        self.label.setText(showing_string)
        self.label.adjustSize()
        self.label.repaint()

    def reset(self):
        self.label.setText("Waiting")
        try:
            os.remove("judge.txt")
        except:
            pass
        try:
            os.remove("string.txt")
        except:
            pass
